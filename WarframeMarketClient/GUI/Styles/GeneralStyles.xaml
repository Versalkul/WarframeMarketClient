<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:converter="clr-namespace:WarframeMarketClient.GUI.Converter"
                    xmlns:gui="clr-namespace:WarframeMarketClient.GUI" xmlns:Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero">

    <Color x:Key="BorderColor">#CCC</Color>
    <SolidColorBrush x:Key="BorderBrush" Color="{StaticResource BorderColor}"/>



    <Color x:Key="MouseOverColor">GhostWhite</Color>
    <SolidColorBrush x:Key="MouseOverBrush" Color="{StaticResource MouseOverColor}"/>

    <Color x:Key="SelectionColor">#FFFAEBD7</Color>
    <Color x:Key="SelectionStrongColor">#FFFAA432</Color>
    <SolidColorBrush x:Key="SelectionBrush" Color="{StaticResource SelectionColor}"/>
    <SolidColorBrush x:Key="SelectionStrongBrush" Color="{StaticResource SelectionStrongColor}"/>


    <!-- Stop whole Tabs from getting selected... -->
    <Style TargetType="{x:Type ContentControl}">
        <Setter Property="IsTabStop" Value="False" />
    </Style>


    <Style TargetType="{x:Type gui:FancyTabControl}">
        <Style.Resources>
            <converter:TabInfoToHasInfoConverter x:Key="TabInfoToHasInfoConverter"/>
            <Style TargetType="{x:Type TabItem}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type TabItem}">
                            <Grid x:Name="Panel" Margin="0" UseLayoutRounding="True">
                                <Border x:Name="Border" Background="White" BorderThickness="0,0,1,1" BorderBrush="{StaticResource BorderBrush}" Margin="0" Padding="10,5">
                                    <ContentPresenter x:Name="ContentSite"
										VerticalAlignment="Center"
										HorizontalAlignment="Stretch"
										MinWidth="50"
										ContentSource="Header"
										Margin="{Binding TabNameMargin, RelativeSource={RelativeSource AncestorType={x:Type gui:FancyTabControl}}}"/>
                                </Border>
                                <!-- Margin is neccessary to make sure the Border is hidden behind the path
                                    Some systems unfortunately Layout-Round to fraction numbers (Win10 scaling the GUI)-->
                                <Path x:Name="BorderPath"
									Margin="0,0,-1,0"
									Stroke="{StaticResource BorderBrush}"
									Fill="White"
									StrokeThickness="1"
									Data="M0,0 L-11,10 0,20"
									HorizontalAlignment="Right"
									Visibility="Hidden"
									VerticalAlignment="Center" 
                                    SnapsToDevicePixels="False"/>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsSelected" Value="True">
                                    <Setter TargetName="Border" Property="Background" Value="{StaticResource SelectionBrush}" />
                                    <Setter TargetName="BorderPath" Property="Visibility" Value="Visible" />
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsMouseOver" Value="True"/>
                                        <Condition Property="IsSelected" Value="False"/>
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="Border" Property="Background" Value="{StaticResource MouseOverBrush}" />
                                </MultiTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="False"/>
                                        <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="False"/>
                                        <Condition Value="True">
                                            <Condition.Binding>
                                                <MultiBinding Converter="{StaticResource TabInfoToHasInfoConverter}">
                                                    <Binding RelativeSource="{RelativeSource Self}" Path="Content.HasInfo" />
                                                    <Binding RelativeSource="{RelativeSource Self}" Path="DataContext.HasInfo" />
                                                </MultiBinding>
                                            </Condition.Binding>
                                        </Condition>
                                    </MultiDataTrigger.Conditions>
                                    <MultiDataTrigger.EnterActions>
                                        <BeginStoryboard x:Name="InfoBlinker">
                                            <Storyboard Storyboard.TargetName="Border" AutoReverse="True" RepeatBehavior="Forever" Storyboard.TargetProperty="Background.Color">
                                                <ColorAnimation From="{StaticResource SelectionColor}" To="{StaticResource SelectionStrongColor}" AutoReverse="True" Duration="0:0:1" />
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </MultiDataTrigger.EnterActions>
                                    <MultiDataTrigger.ExitActions>
                                        <StopStoryboard BeginStoryboardName="InfoBlinker" />
                                    </MultiDataTrigger.ExitActions>
                                </MultiDataTrigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter TargetName="Border" Property="Opacity" Value="0.3" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </Style.Resources>



        <Setter Property="TabNameMargin" Value="20,2"/>
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="TabStripPlacement" Value="Left"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type gui:FancyTabControl}">
                    <!-- UseLayoutRounding has opposite effect on Win10?! Need to investigate further -->
                    <Grid UseLayoutRounding="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>

                        <!-- Tabs -->
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*" />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>

                            <Border Grid.RowSpan="2" BorderThickness="0,0,1,0" BorderBrush="{StaticResource BorderBrush}" />

                            <ScrollViewer HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Hidden"
								Margin="0" Padding="0">
                                <TabPanel IsItemsHost="True" Margin="0"/>
                            </ScrollViewer>

                            <ContentPresenter ContentSource="BelowTabsContent" Grid.Row="1" Margin="0"/>
                        </Grid>

                        <!-- Content -->
                        <Border BorderThickness="0"
							Grid.Column="1"
							Margin="{TemplateBinding ContentMargin}">
                            <ContentPresenter ContentSource="SelectedContent" Margin="0" />
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <Style x:Key="CleanButton" TargetType="{x:Type Button}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Foreground" Value="#BF000000" />
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{StaticResource BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}">
                        <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="Background">
                                <Setter.Value>
                                    <SolidColorBrush Color="{Binding Background.Color, RelativeSource={RelativeSource TemplatedParent}}" Opacity="0.5"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Border" Property="Background">
                                <Setter.Value>
                                    <SolidColorBrush Color="{Binding Background.Color, RelativeSource={RelativeSource TemplatedParent}}" Opacity="0.2"/>
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="Border" Property="BorderBrush" Value="#aaa" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="Opacity" Value="0.3" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="SelectableTextBlockLikeStyle" TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Type TextBox}}">
        <Setter Property="IsReadOnly" Value="True"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="MinHeight" Value="0"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <ScrollViewer x:Name="PART_ContentHost" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


</ResourceDictionary>